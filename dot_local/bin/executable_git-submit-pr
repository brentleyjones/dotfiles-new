#!/bin/bash

set -euo pipefail

readonly commit_arg="${1:-HEAD}"
readonly base_branch_commit_arg="${2:-}"
if [[ $# -gt 0 ]]; then
  shift
fi

readonly commit="$(git rev-parse "$commit_arg")"
readonly branch_name="bj/$(git show --no-patch --format=%f "$commit" | tr '[:upper:]' '[:lower:]')"

if git show-ref --verify --quiet refs/heads/"$branch_name"; then
  echo "error: branch named '$branch_name' already exists" >&2
  exit 1
fi

if [[ "$base_branch_commit_arg" != "" ]]; then
  readonly base_branch_commit="$(git rev-parse "$base_branch_commit_arg")"
  readonly base_branch_name="bj/$(git show --no-patch --format=%f "$base_branch_commit" | tr '[:upper:]' '[:lower:]')"
  readonly branch_with_remote=$(git for-each-ref --format='%(upstream:short)' "$(git config "branch.$base_branch_name.merge")")
  readonly remote_branch_name="${branch_with_remote#*/}"
else
  readonly branch_with_remote=$(git rev-parse --abbrev-ref --symbolic-full-name "@{upstream}")
  readonly remote_branch_name="${branch_with_remote#*/}"
fi

git branch --no-track "$branch_name" "$branch_with_remote"

trap 'trap '' EXIT && git branch -D "$branch_name"' EXIT INT TERM

readonly worktree_name=$(git rev-parse --show-toplevel | md5)
readonly worktree_dir="/tmp/$worktree_name"
# If the OS cleaned the directory in the /tmp dir, it maybe exist but be empty
if [[ ! -f "$worktree_dir/.git" ]]; then
  rm -rf "$worktree_dir" 2>/dev/null || true
  git worktree prune
  git worktree add "$worktree_dir" "$branch_name"
else
  git -C "$worktree_dir" switch "$branch_name"
fi

_checkout_empty() {
  git -C "$worktree_dir" switch -C "empty-$worktree_name" --quiet
}

_cleanup_cherrypick() {
  git -C "$worktree_dir" cherry-pick --abort
  _checkout_empty
  git branch -D "$branch_name"
}

if ! git -C "$worktree_dir" cherry-pick "$commit"; then
  trap 'trap '' EXIT && _cleanup_cherrypick' EXIT INT TERM
  git -C "$worktree_dir" mergetool
  git -C "$worktree_dir" cherry-pick --continue
fi

trap '_checkout_empty' EXIT

if git -C "$worktree_dir" push --quiet --set-upstream origin "$branch_name"; then
  gh pr create --web --base "$remote_branch_name" --head "$branch_name"
elif git -C "$worktree_dir" push --quiet --set-upstream mine "$branch_name"; then
  git -C "$worktree_dir" open --remote mine "pull/new/$branch_name"
else
  echo "error: failed to create remote branch" >&2
  git branch -d "$branch_name"
fi
